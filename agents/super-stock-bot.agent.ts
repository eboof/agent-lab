// agents/super-stock-bot.agent.ts
// Auto-generated by Agent Builder

import { BaseAgent } from "../server/agent-builder/agent.ts";
import { YahooFinanceTool } from "../server/tools/implementations/yahoo-finance-tool.ts";
import { AnthropicTool } from "../server/tools/implementations/anthropic-tool.ts";


export class SuperStockBotAgent extends BaseAgent {
  constructor() {
    super({
      name: "Super Stock Bot",
      description: "Advanced AI-powered stock analysis",
      version: "0.1",
      systemPrompt: "You are Super Stock Bot. Advanced AI-powered stock analysis",
      tools: [
  {
    "id": "yahoo-finance",
    "name": "yahoo-finance",
    "type": "tool"
  },
  {
    "id": "anthropic-api",
    "name": "anthropic-api",
    "type": "tool"
  }
],
      inputSchema: {
  "query": {
    "type": "string",
    "required": true,
    "description": "User query"
  }
},
      outputSchema: {
  "result": {
    "type": "string",
    "required": true,
    "description": "Agent response"
  }
},
      dependencies: [],
      environmentVars: [],
      timeout: 0,
      retries: 0,
      memory: false
    });
  }

  protected async execute(input: Record<string, any>): Promise<any> {
    this.log("Starting execution with input:", input);
    
    try {
      // Your custom agent logic goes here
      // Access input fields: input.query
      
      // Process based on selected tools
      // Yahoo Finance integration - get real stock data
      let stockData = null;
      if (input.symbol) {
        try {
          stockData = await YahooFinanceTool.getStockAnalysis(input.symbol, input.period || '1mo');
          this.log("Retrieved stock data for", input.symbol);
        } catch (error: any) {
          this.error("Failed to get stock data:", error.message);
        }
      }

      // AI analysis of data
      let aiAnalysis = null;
      const anthropicKey = this.getAnthropicKey();
      if (anthropicKey && stockData) {
        try {
          aiAnalysis = await AnthropicTool.analyzeStockData(anthropicKey, stockData, this.config.systemPrompt);
          this.log("Generated AI analysis with Claude");
        } catch (error: any) {
          this.error("Claude analysis failed:", error.message);
        }
      }


      
      // Return structured output matching your output schema
      const result = {
        result: aiAnalysis?.analysis || "No result", // Agent response
        
        timestamp: new Date().toISOString(),
        agent: this.config.name
      };
      
      this.log("Execution completed successfully:", result);
      return result;
      
    } catch (error: any) {
      this.error("Execution failed:", error);
      throw error;
    }
  }
}

// Default export for Agent-Lab runner compatibility
export default async function run(args: string[]) {
  const agent = new SuperStockBotAgent();
  return await agent.run(args);
}
