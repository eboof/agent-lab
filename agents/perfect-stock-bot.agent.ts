// agents/perfect-stock-bot.agent.ts
// Auto-generated by Agent Builder

import { BaseAgent } from "../server/agent-builder/agent.ts";
import { YahooFinanceTool } from "../server/tools/implementations/yahoo-finance-tool.ts";
import { AnthropicTool } from "../server/tools/implementations/anthropic-tool.ts";


export class PerfectStockBotAgent extends BaseAgent {
  constructor() {
    super({
      name: "Perfect Stock Bot",
      description: "Working stock analyzer with real APIs",
      version: "1.0",
      systemPrompt: "You are a professional stock analyst. Provide detailed investment insights and recommendations.",
      tools: [
  "yahoo-finance",
  "anthropic-api"
],
      inputSchema: {
  "symbol": {
    "type": "string",
    "required": true,
    "description": "Stock symbol (e.g. AAPL)"
  },
  "period": {
    "type": "string",
    "required": false,
    "description": "Analysis period (1mo, 3mo, 1y)"
  }
},
      outputSchema: {
  "current_price": {
    "type": "number",
    "required": true,
    "description": "Current stock price"
  },
  "price_change": {
    "type": "number",
    "required": true,
    "description": "Price change percentage"
  },
  "analysis": {
    "type": "string",
    "required": true,
    "description": "AI-generated analysis"
  },
  "recommendation": {
    "type": "string",
    "required": true,
    "description": "Investment recommendation"
  },
  "risk_level": {
    "type": "string",
    "required": true,
    "description": "Risk assessment"
  }
},
      dependencies: [],
      environmentVars: [],
      timeout: 0,
      retries: 0,
      memory: false
    });
  }

  protected async execute(input: Record<string, any>): Promise<any> {
    this.log("Starting execution with input:", input);
    
    try {
      // Your custom agent logic goes here
      // Access input fields: input.symbol, input.period
      
      // Process based on selected tools
      // Yahoo Finance integration - get real stock data
      let stockData = null;
      if (input.symbol) {
        try {
          stockData = await YahooFinanceTool.getStockAnalysis(input.symbol, input.period || '1mo');
          this.log("Retrieved stock data for", input.symbol);
        } catch (error: any) {
          this.error("Failed to get stock data:", error.message);
        }
      }

      // AI analysis of data
      let aiAnalysis = null;
      const anthropicKey = this.getAnthropicKey();
      if (anthropicKey && stockData) {
        try {
          aiAnalysis = await AnthropicTool.analyzeStockData(anthropicKey, stockData, this.config.systemPrompt);
          this.log("Generated AI analysis with Claude");
        } catch (error: any) {
          this.error("Claude analysis failed:", error.message);
        }
      }


      
      // Return structured output matching your output schema
      const result = {
        current_price: stockData?.quote?.currentPrice || 0, // Current stock price
        price_change: stockData?.quote?.priceChangePercent || 0, // Price change percentage
        analysis: aiAnalysis?.analysis || "Analysis not available", // AI-generated analysis
        recommendation: (aiAnalysis?.analysis?.toLowerCase().includes("buy") ? "BUY" : aiAnalysis?.analysis?.toLowerCase().includes("sell") ? "SELL" : "HOLD"), // Investment recommendation
        risk_level: stockData?.analysis?.riskLevel || "medium", // Risk assessment
        
        timestamp: new Date().toISOString(),
        agent: this.config.name
      };
      
      this.log("Execution completed successfully:", result);
      return result;
      
    } catch (error: any) {
      this.error("Execution failed:", error);
      throw error;
    }
  }
}

// Default export for Agent-Lab runner compatibility
export default async function run(args: string[]) {
  const agent = new PerfectStockBotAgent();
  return await agent.run(args);
}
