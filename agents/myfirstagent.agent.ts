// agents/myfirstagent.agent.ts
// Auto-generated by Agent Builder

import { BaseAgent } from "../server/agent-builder/agent.ts";

export class MyFirstAgentAgent extends BaseAgent {
  constructor() {
    super({
      name: "MyFirstAgent",
      description: "An example agent",
      version: "0.1",
      systemPrompt: "You are a helpful agent.",
      tools: [
  "yahoo-finance"
],
      inputSchema: {
  "symbol": {
    "type": "string",
    "required": true,
    "description": "ticker symbol"
  }
},
      outputSchema: {
  "price": {
    "type": "number",
    "required": false,
    "description": ""
  },
  "analysis": {
    "type": "string",
    "required": false,
    "description": ""
  }
},
      dependencies: [],
      environmentVars: [],
      timeout: 0,
      retries: 0,
      memory: false
    });
  }

  protected async execute(input: Record<string, any>): Promise<any> {
    this.log("Starting execution with input:", input);
    
    try {
      // Your custom agent logic goes here
      // Access input fields: input.symbol
      
      // Process based on selected tools
      // Yahoo Finance API integration
      if (input.symbol || input.query?.includes('stock')) {
        // TODO: Add yahoo-finance2 integration
        // const yahooFinance = require('yahoo-finance2');
        // const quote = await yahooFinance.quote(input.symbol);
      }


      
      // Return structured output matching your output schema
      const result = {
        price: 0, // Generated field
        analysis: "TODO: Implement analysis logic", // Generated field
        
        timestamp: new Date().toISOString(),
        agent: this.config.name
      };
      
      this.log("Execution completed successfully:", result);
      return result;
      
    } catch (error: any) {
      this.error("Execution failed:", error);
      throw error;
    }
  }
}

// Default export for Agent-Lab runner compatibility
export default async function run(args: string[]) {
  const agent = new MyFirstAgentAgent();
  return await agent.run(args);
}
