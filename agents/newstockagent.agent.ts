// agents/newstockagent.agent.ts
// Auto-generated by Agent Builder

import { BaseAgent } from "../server/agent-builder/agent.ts";
import { YahooFinanceTool } from "../server/tools/implementations/yahoo-finance-tool.ts";
import { OpenAITool } from "../server/tools/implementations/openai-tool.ts";


export class NewStockAgentAgent extends BaseAgent {
  constructor() {
    super({
      name: "NewStockAgent",
      description: "An example agent",
      version: "0.1",
      systemPrompt: "You are a Stock analysis expert. Provide detailed market insights, technical analysis, and investment recommendations based on the data provided. Include risk assessments and market context",
      tools: [
  "yahoo-finance",
  "openai-api"
],
      inputSchema: {
  "symbol": {
    "type": "string",
    "required": true,
    "description": "Stock Symbol to Analyse 9.e.g. AAPL, WOW.AX"
  },
  "period": {
    "type": "string",
    "required": false,
    "description": "Time period for analysis (e.g. 1d, 5d, 1mo, 3mo, 1y)"
  },
  "analysis type": {
    "type": "string",
    "required": false,
    "description": "Type of Ananlysis (technical, fundamental, sentiment)"
  }
},
      outputSchema: {
  "current_price": {
    "type": "number",
    "required": true,
    "description": "Current Stock Price"
  },
  "price_change": {
    "type": "number",
    "required": true,
    "description": "Price change Percentage"
  },
  "analysis": {
    "type": "string",
    "required": true,
    "description": "AI generated Analysis and Insights"
  },
  "recommendation": {
    "type": "string",
    "required": true,
    "description": "Buy/Hole/Sell recommendation"
  },
  "risk_level": {
    "type": "string",
    "required": true,
    "description": "Risk Assessment (Low,Medium, High)"
  },
  "key_metrics": {
    "type": "string",
    "required": false,
    "description": "Additional Financial Metrics"
  }
},
      dependencies: [],
      environmentVars: [],
      timeout: 0,
      retries: 0,
      memory: false
    });
  }

  protected async execute(input: Record<string, any>): Promise<any> {
    this.log("Starting execution with input:", input);
    
    try {
      // Your custom agent logic goes here
      // Access input fields: input.symbol, input.period, input.analysis type
      
      // Process based on selected tools
      // Yahoo Finance integration - get real stock data
      let stockData = null;
      if (input.symbol) {
        try {
          stockData = await YahooFinanceTool.getStockAnalysis(input.symbol, input.period || '1mo');
          this.log("Retrieved stock data for", input.symbol);
        } catch (error: any) {
          this.error("Failed to get stock data:", error.message);
        }
      }

      // AI analysis of data
      let aiAnalysis = null;
      const openaiKey = this.getOpenAIKey();
      if (openaiKey && stockData) {
        try {
          aiAnalysis = await OpenAITool.analyzeStockData(openaiKey, stockData, this.config.systemPrompt);
          this.log("Generated AI analysis with GPT-4");
        } catch (error: any) {
          this.error("OpenAI analysis failed:", error.message);
        }
      }


      
      // Return structured output matching your output schema
      const result = {
        current_price: stockData?.quote?.currentPrice || 0, // Current Stock Price
        price_change: stockData?.quote?.priceChangePercent || 0, // Price change Percentage
        analysis: aiAnalysis?.analysis || "Analysis not available", // AI generated Analysis and Insights
        recommendation: (aiAnalysis?.analysis?.toLowerCase().includes("buy") ? "BUY" : aiAnalysis?.analysis?.toLowerCase().includes("sell") ? "SELL" : "HOLD"), // Buy/Hole/Sell recommendation
        risk_level: stockData?.analysis?.riskLevel || "medium", // Risk Assessment (Low,Medium, High)
        key_metrics: stockData?.technicalIndicators || {}, // Additional Financial Metrics
        
        timestamp: new Date().toISOString(),
        agent: this.config.name
      };
      
      this.log("Execution completed successfully:", result);
      return result;
      
    } catch (error: any) {
      this.error("Execution failed:", error);
      throw error;
    }
  }
}

// Default export for Agent-Lab runner compatibility
export default async function run(args: string[]) {
  const agent = new NewStockAgentAgent();
  return await agent.run(args);
}
